#!/usr/bin/env ruby

require 'gtktrayicon'
require "xmlrpc/client"
require 'yaml'

class NeedFullUpdate < Exception
end

class TorrentView < Gtk::TreeView
  def initialize
    #                          id,      title,  status, progress
    @list = Gtk::ListStore.new(Integer, String, String, Integer)
    super(@list)
    @title_renderer = Gtk::CellRendererText.new
    @progress_renderer = Gtk::CellRendererProgress.new

    @left_column =  Gtk::TreeViewColumn.new( "Title", @title_renderer) 
    @left_column.set_cell_data_func(@title_renderer) do |col, renderer, model, iter|
      renderer.markup = "<b>#{iter[1]}</b>\n<small>#{iter[2]}</small>"
    end
    @right_column = Gtk::TreeViewColumn.new("Progress", @progress_renderer, :value => 3)

    append_column( @left_column )
    append_column( @right_column )
  end
  def refresh_torrents(torrents)
    t2 = {}
    torrents.each { |e| t2[e.id] = e }
    disappeared = []
    @list.each do |model,path,iter|
      id = iter[0]
      if inp = t2[id] # we have a row and an update is avaiable
        update_torrent(iter,inp)
        t2.delete id
      else # we have a row, but no update avaible
        disappeared.push Gtk::TreeRowReference.new(model,path)
      end
    end
    disappeared.each do |rowref| # remove the items we don't get updates for
      (path = rowref.path) and @list.remove(@list.get_iter(path))
    end
    t2.each do |id,inp| # new items
      append_torrent(inp)
    end
    raise NeedFullUpdate unless t2.empty?
  end

  private
  def append_torrent(torrent)
    return unless torrent.full?
    row = @list.append
    row[0] = torrent.id
    row[1] = torrent.title || torrent.filename || "Torrent ##{torrent.id}"
    row[2] = torrent.status
    row[3] = torrent.percent_done
  end
  def update_torrent(row,torrent)
    row[3] = torrent.percent_done
  end
end

class CataractWindow < Gtk::Window
  def initialize(title='Cataract')
    super(title)
    #signal_connect_after("expose_event") do
    #end
    signal_connect_after("delete_event") do
      hide
    end
    layout
    @fetcher = TorrentFetcher.new
    toggle
  end
  def layout
    @box = Gtk::VBox.new
    add @box
    @view = TorrentView.new
    @box.pack_start @view
    @statusbar = Gtk::Statusbar.new
    @context = @statusbar.get_context_id "23"
    @box.pack_end @statusbar
  end
  def toggle
    if visible?
      hide
    else
      init_content
      ensure_style
      show_all
      Thread.new do
        loop do
          begin
            @view.refresh_torrents(@fetcher.update_torrents) if visible?
          rescue NeedFullUpdate => e
            init_torrents
          end
          sleep 23
        end
      end
    end
  end
  def set_status(message)
    message_id = @statusbar.push(@context,message)
    Thread.new do
      sleep 23
      @statusbar.remove(@context,message_id)
    end
  end
  def clear
    each do |child|
      child.destroy
    end
  end

  def init_content
    set_status('initializing')
    show_all
  end
  def init_torrents
    set_status "Fetching torrents"
    torrents = @fetcher.get_torrents
    if !torrents or torrents.empty?
      clear
      set_status('no torrents')
      return
    end
    @view.refresh_torrents torrents
  rescue NeedFullUpdate => e
    # already done that
  rescue Exception => e
    set_status(e.message)
    return
  end

end

class CataractTrayIcon < Gtk::TrayIcon
  def initialize(title="Cataract")
    @title = title
    super(@title)
    create_icon
    show_all
  end

  def create_icon
    @popup = CataractWindow.new

    icon = Gtk::Image.new '/usr/share/icons/cataract.png'
    icon.set_icon_size Gtk::IconSize::BUTTON
    add icon 
    add_events(Gdk::Event::BUTTON_PRESS_MASK)
    add_events(Gdk::Event::BUTTON_RELEASE_MASK)

    menu = Gtk::Menu.new

    @menu_show = menu_show = Gtk::MenuItem.new("Show")
    @menu_hide = menu_hide = Gtk::MenuItem.new("Hide")
    menu_show.signal_connect('activate') { |w,e| toggle_popup }
    menu_hide.signal_connect('activate') { |w,e| toggle_popup }
    menu_quit = Gtk::MenuItem.new("Quit")
    menu_quit.signal_connect('activate') { |w,e| Gtk.main_quit }
    menu.append(menu_show.show)
    menu.append(menu_hide)
    menu.append(menu_quit.show)
    menu.show

    signal_connect('button-press-event') do |widget,event|
      case event.button 
      when 1
        toggle_popup
      when 3
        menu.popup(nil,nil,event.button,event.time)
      else
        puts "Button #{event.button} not used"
      end
    end
  end

  def toggle_popup
    if @popup.visible?
      @menu_show.show
      @menu_hide.hide
    else
      @menu_show.hide
      @menu_hide.show
    end
    @popup.toggle
  end
end

class MockTorrent
  def initialize(hsh,full=false)
    @hsh = hsh
    @full = full
  end
  def method_missing(name)
    name = name.to_s
    @hsh[name]
  end
  def id
    @hsh['id']
  end
  def full?
    @full
  end
end

class TorrentFetcher
  attr_reader :rpc
  CONFIG = ENV['HOME'] + '/.cataract.yml'
  def initialize
    unless File.exists?(CONFIG)
      write_default_config
      puts "please edit #{CONFIG} and restart"
      exit
    end
    read_config
    @rpc = XMLRPC::Client.new(
      @config['host'], @config['url'], @config['port'].to_i,
      nil, nil, # proxy
      @config['user'], @config['password']
    )
    @rpc.http_header_extra = {'Accept' => 'application/xml, text/xml' }
  end

  def read_config
    @config = YAML.load(File.open(CONFIG))
  end

  def write_default_config
   conf = {
     'user' => 'username',
     'password' => 'foo',
     'host' => '192.168.1.1',
     'port' => 80,
     'url' => '/backend/api'
   }
   File.open(CONFIG,'w') do |file|
     file.puts conf.to_yaml
   end
  end

  def get_torrents
    rpc.call('Watchlist').map {|thash| MockTorrent.new(thash,true) }
  end

  def update_torrents
    rpc.call('UpdateWatchlist').map {|thash| MockTorrent.new(thash) }
  end
end

Thread.abort_on_exception = true
tray = CataractTrayIcon.new
Gtk.main
