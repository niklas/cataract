#!/usr/bin/env ruby

require 'gtktrayicon'
require "xmlrpc/client"
require 'yaml'

class CataractWindow < Gtk::Window
  def initialize(title='Cataract')
    super(title)
    @bar = []
    #signal_connect_after("expose_event") do
    #end
    signal_connect_after("delete_event") do
      hide
    end
  end
  def fetcher=(new_fetcher)
    @fetcher = new_fetcher
  end
  def toggle
    if visible?
      hide
    else
      init_content
      ensure_style
      show_all
      Thread.new do
        init_torrents
      end
    end
  end
  def clear
    each do |child|
      child.destroy
    end
  end

  def init_content
    unless child
      add Gtk::Label.new('initializing')
      show_all
    end
  end
  def init_torrents
    torrents = @fetcher.get_torrents
    if !torrents or torrents.empty?
      clear
      add Gtk::Label.new('no torrents')
      return
    end
    list = Gtk::VBox.new(true)
    torrents.each do |torrent|
      list.pack_end(item_for_torrent(torrent))
    end
    clear
    add list
    show_all
  rescue Exception => e
    clear
    add Gtk::Label.new(e.message)
    return
  end

  def update_torrents
    @fetcher.update_torrents.each do |t|
      i = t.id
      if b = @bar[i]
        b.set_fraction(t.percent_done / 100)
      end
    end
  rescue Exception => e
    return Gtk::Label.new(e.message)
  end

  def item_for_torrent(torrent)
    title = torrent.title || torrent.filename || '[no title]'

    bar = Gtk::ProgressBar.new
    bar.set_fraction(torrent.percent_done.to_f/100)
    bar.add_events(Gdk::Event::BUTTON_PRESS_MASK)
    bar.add_events(Gdk::Event::BUTTON_RELEASE_MASK)
    # FIXME must get updated value
    bar.signal_connect('button-press-event') do |widget,event|
      if widget.text =~ /^\d+.\d+%$/
        widget.text = title
      else
        widget.text = "#{torrent.percent_done}%"
      end
    end
    bar.text = title

    @bar[torrent.id] = bar
    bar.show
    
    bar
  end
end

class CataractTrayIcon < Gtk::TrayIcon
  def initialize(title="Cataract")
    @title = title
    super(@title)
    create_icon
    show_all
  end

  def create_icon
    @popup = CataractWindow.new
    @popup.fetcher = TorrentFetcher.new

    icon = Gtk::Image.new '/usr/share/icons/cataract.png'
    icon.set_icon_size Gtk::IconSize::BUTTON
    add icon 
    add_events(Gdk::Event::BUTTON_PRESS_MASK)
    add_events(Gdk::Event::BUTTON_RELEASE_MASK)

    menu = Gtk::Menu.new

    @menu_show = menu_show = Gtk::MenuItem.new("Show")
    @menu_hide = menu_hide = Gtk::MenuItem.new("Hide")
    menu_show.signal_connect('activate') { |w,e| toggle_popup }
    menu_hide.signal_connect('activate') { |w,e| toggle_popup }
    menu_quit = Gtk::MenuItem.new("Quit")
    menu_quit.signal_connect('activate') { |w,e| Gtk.main_quit }
    menu.append(menu_show.show)
    menu.append(menu_hide)
    menu.append(menu_quit.show)
    menu.show

    signal_connect('button-press-event') do |widget,event|
      case event.button 
      when 1
        toggle_popup
      when 3
        menu.popup(nil,nil,event.button,event.time)
      else
        puts "Button #{event.button} not used"
      end
    end
  end

  def toggle_popup
    if @popup.visible?
      @menu_show.show
      @menu_hide.hide
    else
      @menu_show.hide
      @menu_hide.show
    end
    @popup.toggle
  end
end

class MockTorrent
  def initialize(hsh)
    @hsh = hsh
  end
  def method_missing(name)
    name = name.to_s
    @hsh[name]
  end
  def id
    @hsh['id']
  end
end

class TorrentFetcher
  attr_reader :rpc
  CONFIG = ENV['HOME'] + '/.cataract.yml'
  def initialize
    unless File.exists?(CONFIG)
      write_default_config
      puts "please edit #{CONFIG} and restart"
      exit
    end
    read_config
    @rpc = XMLRPC::Client.new(
      @config['host'], @config['url'], @config['port'].to_i,
      nil, nil, # proxy
      @config['user'], @config['password']
    )
    @rpc.http_header_extra = {'Accept' => 'application/xml, text/xml' }
  end

  def read_config
    @config = YAML.load(File.open(CONFIG))
  end

  def write_default_config
   conf = {
     'user' => 'username',
     'password' => 'foo',
     'host' => '192.168.1.1',
     'port' => 80,
     'url' => '/backend/api'
   }
   File.open(CONFIG,'w') do |file|
     file.puts conf.to_yaml
   end
  end

  def get_torrents
    puts "getting torrents"
    torrents = []
    rpc.call('Watchlist').each do |thash|
      torrents << MockTorrent.new(thash)
    end
    return torrents
  end

  def update_torrents
    rpc.call('UpdateWatchlist')
  end
end

tray = CataractTrayIcon.new
Gtk.main
