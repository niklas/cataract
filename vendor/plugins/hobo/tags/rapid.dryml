<include module="Hobo::RapidHelper"/>

<include src="rapid_support"/>
<include src="rapid_document_tags"/>
<include src="rapid_pages"/>
<include src="rapid_editing"/>
<include src="rapid_forms"/>
<include src="rapid_navigation"/>
<include src="rapid_plus"/>

<def tag="FieldList" attrs="tag">
  <% tag ||= scope.in_form ? "input" : "editor" %>
  <field_list merge_attrs="&attributes - attrs_for(:with_fields)">
    <with_fields merge_attrs="&attributes & attrs_for(:with_fields)">
      <field_list_item>
        <item_label param="#{this_field.to_s.sub('?', '')}_label">
          <do param="label"><%= this_field.to_s.titleize %></do>
        </item_label>
        <item_value param="#{this_field.to_s.sub('?', '')}_view">
          <do param="view"><call_tag tag="&tag" param="#{this_field.to_s.sub('?', '')}_tag"/></do>
        </item_value>
      </field_list_item>
    </with_fields>
  </field_list>
</def>


<def tag="item"><% scope.items << tagbody.call %></def>

<def tag="nil_view"><%= scope.nil_view || "(Not Available)" %></def>

<def tag="UL">
  <ul merge_attrs unless="&this.empty?">
    <repeat>
      <li param if="&can_view?" class="#{scope.even_odd} #{this_type.name.underscore}"
          merge_attrs="&{:hobo_model_id => dom_id(this)} if this.respond_to?(:typed_id)">
        <tagbody><a/></tagbody>
      </li>
    </repeat>
  </ul>
</def>


<def tag="Table" attrs="fields, field_tag, empty">
  <% field_tag ||= "view" %>
  <table merge_attrs="&attributes - attrs_for(:with_fields)" unless="&this.empty? && !empty">
    <thead if="&all_parameters[:thead] || fields" param>
      <tr param="field_heading_row">
        <with_field_names merge_attrs="&all_attributes & attrs_for(:with_fields)">
          <th param="#{scope.field_name}_heading"><%= scope.field_name.titleize %></th>
        </with_field_names>
        <th if="&all_parameters[:controls]" class="controls"/>
      </tr>
    </thead>
    <tbody>
      <repeat>
        <tr param if="&can_view?"
            class="#{scope.even_odd} #{this_type.name.underscore}"
            hobo_model_id="#{dom_id(this)}">
          <if test="&fields">
            <with_fields merge_attrs="&all_attributes & attrs_for(:with_fields)">
              <td param="#{this_field.to_s.sub('?', '').gsub('.', '_')}_view"><call_tag tag="&field_tag"/></td>
            </with_fields>
            <td class="controls" param="controls" if="&all_parameters[:controls]">
              <a param="edit_link">Edit</a>
              <delete_button param/>
            </td>
          </if>
        </tr>
      </repeat>      
    </tbody>
    <tfoot if="&all_parameters[:tfoot]" param/>
  </table>
</def>


<def tag="image" attrs="src">
  <img src="#{base_url}/images/#{src}" merge_attrs/>
</def>


<def tag="spinner">
  <img src="#{base_url}/hobothemes/#{Hobo.current_theme}/images/spinner.gif" class="hidden" merge_attrs/>
</def>


<def tag="theme_image" attrs="src">
  <img src="#{theme_asset('images/' + src)}" merge_attrs/>
</def>


<def tag="card">
  <%= poly = call_polymorphic_tag('card', attributes) %>
  <div class="card" unless="&poly"><type_name/>: <a/></div>
</def>
  

<def tag="hobo_rapid_javascripts" attrs="tiny_mce"><%=
    res = '<script type="text/javascript">var hoboParts = {};'
    unless Hobo.all_models.empty?
      # Tell JS code how to pluralize names, unless they follow the simple rule
      names = Hobo.all_models.map do |m|
        "#{m}: '#{m.pluralize}'" unless m.pluralize == m + 's'
      end.compact
      res += "var pluralisations = {#{names * ', '}}; "
    end
    base = [base_url, subsite].compact.join("/")
    res += "urlBase = '#{base}'; hoboPagePath = '#{view_name}'</script>"
    
    if tiny_mce
      res += javascript_include_tag("tiny_mce/tiny_mce_src") + %{
               <script type="text/javascript">
                 tinyMCE.init({ mode: "textareas", editor_selector: "tiny_mce",
                       plugins: 'save',
                       theme_advanced_buttons1 : "bold, italic, separator, " +
                                                 "bullist, outdent, indent, separator, " +
                                                 "undo, redo, separator, link, unlink",
                       theme_advanced_buttons2 : "",
                       theme_advanced_buttons3 : ""
                 });
               </script>}
    end
    res
%></def>


<def tag="name"><%= 
  if this.nil?
    nil_view
  else
    name_tag = find_polymorphic_tag("name")
    if name_tag != "name"
      send(name_tag)
    elsif this.is_a?(Array) && this.respond_to?(:proxy_reflection)
      count
    elsif this.is_a? Class and this < ActiveRecord::Base
      this.name.pluralize.titleize
    elsif this.respond_to?(:name) && can_view?(this, :name)
      view(merge_attrs(attributes, {:field => 'name'}))
    elsif this.respond_to?(:title) && can_view?(this, :title)
      view(merge_attrs(attributes, {:field => 'title'}))
    elsif can_view?(this)
      this.to_s
    end
  end
%></def>

<def tag="type_name" attrs="type, plural, lowercase"><%=
  type ||= if this.is_a?(Class)
             this
           elsif this.respond_to? :proxy_reflection
             this.proxy_reflection.klass
           else
             this.class
           end
  name = type.name.titleize
  name = name.pluralize if plural
  name = name.downcase if lowercase
  name
%></def>


<def tag="a" attrs="action, to, params, query_params, href, format, subsite"><%=
  content = tagbody.call if tagbody
   
  params = self.query_params.merge(params || HashWithIndifferentAccess.new) if query_params
  
  if href || attributes[:name]
    # Regular link
    href += "?" + params.map { |n, v| "#{n}=#{v}" }.join('&') if params
    content_tag(:a, content, attributes.update(:href => href))
  else
    target = to || this
  
    if target.nil?
      Hobo::Dryml.last_if = false
      nil_view
    elsif action == "new"
      # Link to a new object form
      new_record = target.new
      new_record.set_creator(current_user)
      if can_create?(new_record)
        
        new_class_name = if target.respond_to?(:proxy_reflection)
                           target.proxy_reflection.klass.name
                         else
                           target.name
                         end

        href = object_url(target, "new", params._?.merge(:subsite => subsite))
        add_classes!(attributes, "new_#{new_class_name.underscore}_link")
        content = "New #{new_class_name.titleize}" if content.blank?
        content_tag(:a, content, attributes.update(:href => href))
      else
        Hobo::Dryml.last_if = false
        ""
      end
    else
      # Link to an existing object

      if target.is_a?(Array) && !target.respond_to?(:proxy_reflection) && target.respond_to?(:member_class)
        # Not much to go on here - last guess is that this is an index page
        target = target.member_class
      end
      
      href = object_url(target, action, params._?.merge(:subsite => subsite))
      add_classes!(attributes, "#{target.class.name.underscore}_link")
      
      href.sub!(/\?|$/, ".#{format}\\0") unless format.blank?
      
      # Set default link text if none given
      content = name if content.blank?
      content_tag(:a, content, attributes.update(:href => href))
    end
  end
%></def>

        
<def tag="view" attrs="inline, block, if_blank, no_wrapper, truncate"><%=
  raise HoboError, "view of non-viewable field '#{this_field}' of #{this_parent.typed_id rescue this_parent}" unless
    can_view?
   
  res = if this.nil? && if_blank.nil?
          this_type.is_a?(Class) && this_type <= String ? "" : nil_view
        elsif this_type.respond_to?(:macro)
          if this_type.macro == :belongs_to
            belongs_to_view(attributes)
          elsif this_type.macro == :has_many
            has_many_view(attributes)
          end
        else
          attrs = add_classes(attributes, "view", type_id, type_and_field)
          attrs[:hobo_model_id] = this_field_dom_id if this_parent && this_parent.respond_to?(:typed_id)
         
          view_tag = find_polymorphic_tag("view")
          
          if view_tag == "view" # i.e. it didn't find a type specific tag
            raise HoboError, "Cannot view: #{this.inspect} (field is #{this_field}, type is #{this.class})"
          else
            view_attrs = attrs_for(view_tag)
            the_view = send(view_tag, attrs & view_attrs)
            
            the_view = if_blank if if_blank && the_view.blank?

            truncate = 30 if truncate == true
            the_view = self.truncate(the_view, truncate.to_i) if truncate
            the_view = the_view.strip
            
            if no_wrapper
              the_view
            else
              wrapper = if inline
                          :span
                        elsif block || (this.class.const_defined?(:COLUMN_TYPE) && this.class::COLUMN_TYPE == :text)
                          :div
                        else
                          :span
                        end
              content_tag(wrapper, the_view, attrs - view_attrs)
            end
          end
        end
   Hobo::Dryml.last_if = !res.blank?
   res
%></def>

    
<def tag="belongs_to_view"><a/></def>

<def tag="has_many_view"><%= this.empty? ? "(none)" : map_this { a }.join(", ") %></def>

<def tag="view" for="Date" attrs="format"><%= format ? this.strftime(format) : this.to_s(:long) %></def>

<def tag="view" for="Time" attrs="format"><%= format ? this.strftime(format) : this.to_s(:long) %></def>

<def tag="view" for="Numeric" attrs="format"><%= format ? format % this : this.to_s %></def>

<def tag="view" for="Hobo::Text"><%= h(this).gsub("\n", "<br/>") %></def>

<def tag="view" for="html"><%= this %></def>

<def tag="view" for="Hobo::MarkdownString"><%= this.to_html %></def>

<def tag="view" for="Hobo::TextileString"><%= this.to_html %></def>

<def tag="view" for="Hobo::PasswordString">[password withheld]</def>

<def tag="view" for="String"><%= h(this).gsub("\n", "<br/>") %></def>

<def tag="view" for="TrueClass"><%= this ? 'Yes' : 'No' %></def>

<def tag="count" attrs="label, prefix, unless_none, if_any"><%=
  if_any = unless_none if if_any.nil?
  raise Exception.new("asked for count of a string") if this.is_a?(String)
   
  if this.is_a?(Class) and this < ActiveRecord::Base
    c = this.count
    label ||= this.name.titleize
  else
    label ||= this.respond_to?(:proxy_reflection) && this.proxy_reflection.name.to_s.singularize.titleize
    c = if this.is_a?(Fixnum)
          this
        elsif this.respond_to?(:count)
          this.count
        else
          this.length
        end
  end
   
  Hobo::Dryml.last_if = c > 0 if unless_none
  if unless_none && c == 0
    ""
  else
    main = label.blank? ? c : pluralize(c, label)
   
    if prefix.in? %w(are is)
      p = c == 1 ? "is" : "are"
      p + ' ' + main
    else
      main
    end
  end
%></def>


<def tag="theme_stylesheet">
  <link href="<%= base_url %>/hobothemes/<%= Hobo.current_theme %>/stylesheets/application.css"
        media="screen" rel="Stylesheet" type="text/css" />
</def>


<def tag="clearer"><div class='clearer'>&nbsp;</div></def>


<!-- The Tags defined below here are a bit rough and will be improved
in the future - use at your own risk. -->

<def tag="has_many_table" attrs="part_id, delete_buttons, headings, id">
  <table_for headings="&headings" merge_attrs="&true">

    <tagbody/>

    <if test="&delete_buttons != false and can_delete?(this)">
      <td><DeleteButton/></td>
    </if>
  </table_for>
  <else>
    <p>There are no <%= this_type.klass.name.titleize.pluralize.downcase %></p>
  </else>
  <div>
    <CreateButton update="&id || part_id"/>
  </div>
</def>


<def tag="add_by_name" attrs="action_name, add_text, update, part_id">
  <% add_to = this
     refl = this_type
     joins = this_parent.send(refl.through_reflection.name)
     add_name = refl.klass.name.titleize
     action_name ||= "Add #{add_name}"
     add_text ||= "To #{action_name.downcase} #{a_or_an add_name.downcase}, " +
                  "enter its name"
     source = refl.source_reflection.name
  %>
  <tagbody with="&joins"/>
  <with with="&joins.new_without_appending">
    <if test="can_create?">
       <form update="&[update, part_id]" message="&action_name" hidden_fields="*">
         <p>
           <%= add_text %>:
           <belongs_to_autocompleting_field field="&source" where_not_in="&dom_id(add_to)" class="autosubmit"/>
         </p>
       </form>
    </if>
  </with>
</def>


<def tag="you" attrs="have, are">
  <if test="&this == current_user">you <%= if have then 'have' elsif are then 'are' end %></if>
  <else><tagbody><name/> <%= if have then 'has' elsif are then 'is' end %></tagbody></else>
</def>


<def tag="You" attrs="have, are">
  <if test="&this == current_user">You <%= if have then 'have' elsif are then 'are' end %></if>
  <else><tagbody><name/> <%= if have then 'has' elsif are then 'is' end %></tagbody></else>
</def>
