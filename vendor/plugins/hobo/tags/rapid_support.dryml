<def tag="with_fields" attrs="fields, skip, skip_associations, include_timestamps"><%
  field_names = if fields.nil? || fields == "*" || fields.is_a?(Class)
                  klass = fields.is_a?(Class) ? fields : this.class
                  columns = klass.content_columns.every(:name)
                  columns -= %w{created_at updated_at created_on updated_on} unless
                    include_timestamps

                  if skip_associations == "has_many"
                    assocs = this.class.reflections.values.reject {|r| r.macro == :has_many }.every(:name)
                    columns + assocs
                  elsif skip_associations
                    columns
                  else
                    assocs = klass.reflections.values.every(:name)
                    columns + assocs
                  end
                else
                  comma_split(fields)
                end
  field_names -= comma_split(skip) if skip
  field_names = field_names.select {|f| can_view?(this, f)}
  field_names.each do |field| %><with field="&field"><tagbody/></with><% end
%></def>

<def tag="with_field_names" attrs="fields, skip, skip_associations, include_timestamps"><%=
  field_names = if fields.nil? || fields == "*" || fields.is_a?(Class)
                  klass = fields.is_a?(Class) ? fields : this.proxy_reflectin.class
                  columns = klass.content_columns.every(:name)
                  columns -= %w{created_at updated_at created_on updated_on} unless include_timestamps

                  if skip_associations == "has_many"
                    assocs = this.reflections.values.reject {|r| r.macro == :has_many }.every(:name)
                    columns + assocs
                  elsif skip_associations
                    columns
                  else
                    assocs = klass.reflections.values.every(:name)
                    columns + assocs
                  end
                else
                  comma_split(fields)
                end

  field_names -= comma_split(skip) if skip
  scope.new_scope do
    field_names.map do |n|
      scope.field_name = n.to_s.gsub("." , "_")
      scope.field_path = n
      tagbody.call
    end
  end
%>
</def>

