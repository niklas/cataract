<def tag="call_tag" attrs="tag">
  <%= send(tag, attributes, &tagbody) %>
</def>


<def tag="CallTemplate" attrs="template">
  <%= send(template, attributes, all_parameters) %>
</def>


<def tag="wrap" attrs="tag, when">
  <% body = tagbody.call %>
  <%= when_ ? call_tag(tag, attributes, &proc { body }) : body %>
</def>

    
<def tag="partial" attrs="as">
   <%= render(:partial => find_partial(this, as), :locals => { :this => this }) %>
</def>


<def tag="repeat" attrs="even_odd, join"><%= 
  if !this.blank? 
    if even_odd
      map_this do
        klass = [attributes[:class], cycle("even", "odd")].compact.join(' ')
        content_tag(even_odd, tagbody.call, attributes.merge(:class => klass, :hobo_model_id => dom_id(this)))
      end.join(join)
    else
      scope.new_scope do
        scope[:even_odd] = "odd"
        map_this do
          res = tagbody.call
          scope.even_odd = scope.even_odd == "even" ? "odd" : "even"
          res
        end.join(join)
      end
    end
  else
    ""
  end
%></def>


<def tag="do"><tagbody/></def>
<def tag="with"><tagbody/></def>


<def tag="if" attrs="test"><%= 
  test = all_attributes.fetch(:test, this)
  res = (cond = !test.blank?) ? tagbody.call : ""
  Hobo::Dryml.last_if = cond
  res
%></def>


<def tag="else"><tagbody unless="&Hobo::Dryml.last_if"/></def>


<def tag="unless" attrs="test"><%= 
  test = all_attributes.fetch(:test, this)     
  res = (cond = test.blank?) ? tagbody.call : ""
  Hobo::Dryml.last_if = cond
  res
%></def>

