# DRYML

Without writing any view layer code at all, the POD application is already in a fairly usable state. The entire UI has been derived automatically using information from our models and controllers. Of course, if you're building an important app, one that is going to be used over and over again, there is never going to be a substitute for a carefully considered, hand-crafted UI. This is where DRYML comes in. DRYML keeps development moving forward very rapidly thanks to two key features:

 * The DRY in DRYML (Don't Repeat Yourself) is there for a reason. DRYML makes it painless to keep your view layer extremely well factored. Well factored code is agile code, and in web development this matters as much in your views as anywhere else. Maybe more.
 
 * DRYML has a unique and powerful *parmaterisation* mechanism. All those automatic pages that are *almost but not quite* what you want -- you won't have to throw away any of it. DRYML will allow you to make very specific changes, small or large. Mark-up that you don't want to change will remain.
 
## DRYML Quickly

Before we get in to refining the POD application, let's have a very quick look at the basics of DRYML. We'll use the front page of the site as a playground, so before you do anything else, make a backup copy of it:

    cp app/views/front/index.dryml app/views/front/index.dryml.bak
    
(Note: Windows user? Use `copy` instead of `cp`)

Now open up `app/views/front/index.dryml` in your browser and delete all the code in there. Go ahead, you have a copy, wipe it all. Then visit the home page of your app and bask in blissfully uninterrupted white-space. That in itself would be a major improvement on many sites on the web today, but for the sake of the tutorial we won't leave it like that.

The first thing to note is that a DRYML file can be treated as if it was a plain old HTML file. Try this:

File: app/views/front/index.dryml

    This <i>is</i> my <b>lovely</b> HTML.
    
Next thing, DRYML is an extension of ERB, so you can still use your good old ERB scriptlets:

File: app/views/front/index.dryml

    Three times four is <%= 3 * 4 %>
    
In fact, use of ERB in DRYML code is better avoided. The goal for DRYML is that the tag library is rich enough that you rarely, if ever, have to resort to "low level" ERB.

Things get more interesting when you start adding DRYML tags to your markup. DRYML tags look just like normal XML tags (mostly), but you can define the content that they render to the page. Put another way, DRYML tags are just like Rails' helpers, but are called from directly inside your content with an XML syntax.

Defining and calling a tag is very simple:

File: app/views/front/index.dryml
    
    <def tag="app-name">POD Classifieds</def>
    
    Welcome to <app-name/>

Like helpers, tags can be parameterised. The simplest way is with XML attributes:

File: app/views/front/index.dryml
    
    <def tag="my-name-is" attrs="name">
        My name is <name/>
    </def>
    
    <my-name-is name="Tom"/>
    
The value of the attribute is made available inside `<my-name-is>` as a local tag `<name/>`

Aside: For the Rubyists reading this tutorial, a few words on what is going on behind the scenes might be useful. Just like ERB, DRYML is compiled to Ruby. In a production environment this is done just once at start-up time. The `<def>` tag compiles to a ruby `def` -- it creates a method. Any attributes passed to the tag are available inside the definition as local variables, just as in Ruby methods. And, again just like Ruby, the same tag syntax can be used both to call methods and to get the value of local variables. So the `<name/>` tag-call above is actually a local-variable access, not a method call. We've over-simplified things a bit here but this is essentially what's going on.
    
As well as passing attributes to parameters, we can also pass named blocks of content. These are called DRYML *parameters* and are created using the special `param` attribute:

File: app/views/front/index.dryml

    <def tag="about-me">
      My name is <span param="name"/> and my job is <span param="job"/>
    </def>

    <about-me>
      <name:>Tom</name>
      <job:>writing tutorials for <a href="http://hobocentral.net">HoboCentral</a></job>
    </about-me>

If you view-source in the browser you should see that the content we gave for the two parameters appeared inside the two `<span>`. That's how parameters work - they allow you to replace the content of some tag with your own content. Note the colon on `<name:>` and `<job:>`. These indicate that name and job are parameters to `<about-me>`, rather than tags we are calling. We call these *parameter-tags*. You might like to think of them as similar to the new keyword parameter syntax coming in Ruby 1.9:
    
    about_me(name: "Tom", job: "Writing tutorials")

An important feature of parameters is that if the defined parameter has content already, that becomes the default for calls that do not provide the parameter. Try this:

    <def tag="about-me">
      My name is <span param="name">top secret</span> and my job is <span param="job"/>
    </def>
    
    <p><about-me>
      <name:>Tom</name>
      <job:>writing tutorials for <a href="http://hobocentral.net">HoboCentral</a></job>
    </about-me></p>
    
    <p><about-me>
      <job:>writing tutorials for <a href="http://hobocentral.net">HoboCentral</a></job>
    </about-me></p>

Parameters to DRYML tags are always optional.

There is a *lot* more to cover in DRYML, but for now we'll show just one more feature. It's quite common to define tags that take only a single parameter. In this case you can call the parameter "default", and omit the parameter-tag in the call. The tag-call ends up looking like a normal XML tag with content:

    <def tag="hobocentral-link">
      <a href="http://hobocentral.net" param="default">HoboCentral</a>
    </def>
    
    More information is avaiable on the <hobocentral-link>Hobo website</hobocentral-link>

That call is exactly equivalent to

    <hobocentral-link>
      <default:>Hobo website</default>
    </hobocentral-link>
    
(Note: oops - no it isn't. There's a bug in Hobo 0.7.1 so that making the `default` parameter-tag explicit doesn't work. Conceptually though, the two are equivalent)

Let's finish up this quick overview with a more realistic example of a custom page. With DRYML we don't typically use Rails' *layouts*. Instead we define a page tag that gives us the basic page structure complete with headers, footers etc. Using tags makes it much easier for individual pages to customise the layout.

In POD, our `<page>` tag is defined by the Hobo Rapid tag library. It's implicitly included in every DRYML file. Rapid's `<page>` tag provides quite a few parameters, and to use it well we need to get to know these parameters. For now, just to see it working, we'll put some content in the, er, `<content:>` parameter.
    
    <page>
      <content:>This is my totally custom page</content>
    </page>
    
The content appears inside the familiar POD page, with the the normal header intact.

OK That's enough DRYML fundamentals for now. Let's get back to refining app. Copy your backup of index.html back into place.

    cp app/views/front/index.dryml.bak app/views/front/index.dryml
    
## Customising the application name

The title of our app is currently "Pod". Hobo gets that from the directory name that our app resides in. We can change the name easily though. We do this with a common DRYML technique - by defining a tag with a known name. It's a bit like writing a callback method -- it's not for you to call, it's for the framework to call.

To set the application name, you define `<app-name/>`. We want to set the name throughout the app so this definition needs to go in the global taglib: `app/views/taglibs/application.dryml`. Any tags we define in this file are available throughout our views. Open this file in your editor. There's a couple of bits and bobs in there already, but ignore those for now. Add this at the bottom:

    <def tag="app-name">POD Classifieds</def>

The name in the header will change throughout, and so will the welcome message on the front page.

## A custom front page

The default front page is displaying a preview of a few categories. We're going to change it to display the full content of some recent adverts. There's quite a lot going on in the source code for the front page but we won't get side tracked into that for now. Open the file and empty out the bits we don't want so that you're left with:

File: app/views/front/index.dryml

    <page title="#{app_name}">

      <body: class="front-page"/>

      <content-header:>
        <h1 class="front-page-title">Welcome to <app-name/></h1>
        <section class="welcome-message">
          Insert your jazzy marketting phrase here :-)
        </section>
      </content-header>

      <content-body:>
      </content-body>

    </page>
    
That's our starting point. We're now going to add the recent adverts. The "right" way to do this takes advantage of a whole set of DRYML features that we've not encountered yet. We really want to get the point across about how quick these changes are though, so we're going to throw you in the deep end. Once you've seen it working we'll back up and work towards the ideal solution in steps. 

Modify the content-body parameter like this:

File: app/views/front/index.dryml

    <content-body:>
      <h2>Recent Adverts</h2>
      <card repeat="&Advert.recent.all">
        <content:><view:body/></content:>
      </card>
    </content-body>
    
Job done :-)

TO BE CONTINUED...