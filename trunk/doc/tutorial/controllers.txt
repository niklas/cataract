# Customising controllers

In this  chapter we'll make a few small controller changes and see how the automatic pages respond to give us a still more tailored UI.

## Removing an 'index' page

The front page and main nav bar decide which models to show based on the presence of an index page, or, more accurately an index *route*. For example, "Adverts" appears in the main nav because the route `/adverts` exists. If we decided we only wanted adverts to be reachable via their categories, that route would not be needed.

Hobo generates routes automatically by inspecting the controllers. Here's what the adverts controller looks like:

File: app/controllers/adverts_controller.rb

    class AdvertsController < ApplicationController

      hobo_model_controller

      auto_actions :all

    end
    
There's a couple of things to note here. Firstly, the `hobo_model_controller` declaration upgrades this controller with Hobo features. We could specify the model that this controller looks after by passing the model to `hobo_model_controller`:

    hobo_model_controller Advert
    
But we don't need to because by default Hobo infers the model from the name of the controller class.

The line `auto_actions :all` causes the standard set of RESTful actions to be added to our class: index, show, edit, create, update and destroy (if the model had any `has_many` associations there would be some actions created for those too).

The `auto_actions` declaration can be given an `:except` clause to eliminate specific actions. Try modifying that line to:

File: app/controllers/adverts_controller.rb

    auto_actions :all, :except => :index
    
and then refreshing the browser. You should see the "Adverts" link disappear from the main nav (and from the front page too).

## Removing a 'new' page

Make sure you're logged in to the app as 'admin', and click on "Categories" in the nav-bar. You'll see a "New Category" link at the bottom of the page. That leads to a page with a simple form for creating a new category.

The "New Category" page is a bit overkill -- a whole page for a form with a single field? It might be better to have an inline form on the main "Categories" page.

Step one is to remove the "New Category" page. Modify the `auto_actions` in the Categories controller, much as we did with the Adverts controller:

File: app/controllers/categories_controller.rb

    auto_actions :all, :except => :new
    
There is no step two :-) The automatic index page detects the absence of a new page and gives us an in-line form.

## Moving on

OK that's probably about as far as we can go with refining this app while sticking with the fully automatic UI. If this app was expected to have a short life-span or small number of users, you might well decide that the current UI is good enough. Congratulations! You just created a finished web-app with just a handful of lines of code. For apps that you want to take up a level though, you're going to want to hand-tailor the UI. That's where DRYML comes in, which is the topic of the next chapter.
